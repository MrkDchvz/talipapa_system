package admin.forms;


import admin.panels.AdminProductTablePanel;
import com.formdev.flatlaf.intellijthemes.FlatDarkPurpleIJTheme;
import com.formdev.flatlaf.intellijthemes.materialthemeuilite.FlatMaterialDeepOceanIJTheme;
import databaseManager.DatabaseConnectionManager;
import java.sql.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Marku
 */
public class EditProductForm extends javax.swing.JFrame {
    AdminProductTablePanel  adminProductTablePanelScreen;
    PreparedStatement preparedStatement;
    Connection con;
    ResultSet resultSet;
    
    /**
     * Creates new form editProductForm
     */
    public EditProductForm(AdminProductTablePanel adminProductTablePanelScreen) {
        this.adminProductTablePanelScreen = adminProductTablePanelScreen;
        initComponents();
        connect();
        populateComboBox();
    }
    
    
    public void connect() {
        try {
            con = DatabaseConnectionManager.getConnection();
        } catch (SQLException ex) {
            Logger.getLogger(EditProductForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    public void populateComboBox() {
        try {
            preparedStatement = con.prepareStatement("SELECT productId FROM products WHERE isVoid = 0;");
            resultSet = preparedStatement.executeQuery();
            cmbProductId.removeAllItems();
            cmbProductId.addItem("");
//            Populate the combo box with productId
            while (resultSet.next()) {

                cmbProductId.addItem(resultSet.getString("productId"));
            }

        } catch (SQLException ex) {
            Logger.getLogger(EditProductForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private static boolean isValidInteger(String str) {
        try {
            int value = Integer.parseInt(str);
            // checks for negative value
            return value > 0;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnUpdateProduct = new javax.swing.JButton();
        txtProductName = new javax.swing.JTextField();
        txtProductType = new javax.swing.JTextField();
        spnProductPrice = new javax.swing.JSpinner();
        spnProductQuantity = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        cmbProductId = new javax.swing.JComboBox<>();
        btnDeleteProduct = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Edit Product");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Product Name");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Product Type");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Product Quantity");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Product Price");

        btnUpdateProduct.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateProduct.setText("Update Product");
        btnUpdateProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateProductActionPerformed(evt);
            }
        });

        spnProductPrice.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        spnProductQuantity.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Product Id");

        cmbProductId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbProductId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbProductIdItemStateChanged(evt);
            }
        });

        btnDeleteProduct.setForeground(new java.awt.Color(255, 102, 102));
        btnDeleteProduct.setText("Delete");
        btnDeleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteProductActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(btnDeleteProduct)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUpdateProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel6)
                                .addComponent(jLabel7)
                                .addComponent(jLabel5)
                                .addComponent(jLabel2))
                            .addGap(29, 29, 29)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(spnProductQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(spnProductPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtProductType, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cmbProductId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbProductId, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnProductQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnProductPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtProductType, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 14;
        gridBagConstraints.ipady = 40;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(21, 43, 47, 66);
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateProductActionPerformed
        // TODO add your handling code here:
            try {
            // TODO add your handling code here:
            ArrayList<String> errorList = new ArrayList<>();
            // TODO add your handling code here:
            String productId = cmbProductId.getSelectedItem().toString();
            String productName = txtProductName.getText().toUpperCase();
            String productPrice = spnProductPrice.getValue().toString();
            String productQuantity = spnProductQuantity.getValue().toString();
            String productType = txtProductType.getText();
            
            if ("".equals((productId))) {
                errorList.add("Select a Product Id");
            }
            //          Check if user input is valid
            if (productName.isEmpty()) {
                errorList.add("Product Name Required");
            }
            if (productPrice.isEmpty()) {
                errorList.add("Product Price Required");
            }
            // Check if user inputs a valid interger and positive integer
            
            if (isValidInteger(productPrice) == false) {
                errorList.add("Product Price is Invalid");
            }
            
            if (productQuantity.isEmpty()) {
                errorList.add("Product Quantity Required");
            }
            // Check if user inputs a valid interger and positive integer
            if (isValidInteger(productQuantity) == false) {
                errorList.add("Product Quantity is Invalid");
            }
            
            if (productType.isEmpty()) {
                errorList.add("Product Type Required");
            }
//            Retrieve the original name of the selected ProductId
            preparedStatement = con.prepareStatement("SELECT productName FROM products WHERE productId = ? AND isVoid = 0");
            preparedStatement.setString(1, productId);
            resultSet = preparedStatement.executeQuery();
            String originalProductName = "null";
                if (resultSet.next()) {
                    originalProductName = resultSet.getString("productName");
                    System.out.println(originalProductName + " " + productName);
                }
            resultSet.close();
           
            
  
            
//            Check if a productName already exists on the database and productName is not the original product Name
//            This is for the instance that other values besides the original name is changed. 
            preparedStatement = con.prepareStatement("SELECT COUNT(*) AS count FROM products WHERE productName = ? AND productName <> ? AND isVoid = 0;");
            preparedStatement.setString(1, productName);
            if (originalProductName == "null") {
                System.err.println("Error: The variable originalProduct is not initialized");
                System.err.println("Description: THere are no values on resultSet");
            }
            preparedStatement.setString(2, originalProductName);
//           Reset Result Set to a new query
            resultSet = preparedStatement.executeQuery();
//            Check if product already Exists
            resultSet.next();
            int countProductNameMatch = resultSet.getInt("count");
            if (countProductNameMatch > 0) {
                errorList.add("Product Already Exists.");
            }
           
  
           
            
            
            
            if (errorList.isEmpty()) {
                preparedStatement = con.prepareStatement("UPDATE products SET productName=?,  price = ?, stockQuantity = ?, productType = ? WHERE productId = ?");
                preparedStatement.setString(1, productName);
                preparedStatement.setString(2, productPrice);
                preparedStatement.setString(3, productQuantity);
                preparedStatement.setString(4, productType);
                preparedStatement.setString(5, productId);
                            // execute insert query           
                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected == 1) {
                    JOptionPane.showMessageDialog(this, "Product Updated Successfully");
                    txtProductName.setText("");
                    Object spinnerNumberModel = ((SpinnerNumberModel) spnProductPrice.getModel()).getMinimum(); 
               
                    spnProductPrice.setValue(spinnerNumberModel);
                    spnProductQuantity.setValue(spinnerNumberModel);
                    txtProductType.setText("");
                    cmbProductId.setSelectedIndex(0);
                    adminProductTablePanelScreen.populateTable();

                    
                
                }   else {
                     JOptionPane.showMessageDialog(this, "Failed to update product", "Error", JOptionPane.ERROR_MESSAGE);
                }
                
                
            } else {
                JOptionPane.showMessageDialog(this, errorList.get(0), "Error", JOptionPane.ERROR_MESSAGE);
                
            }

        } catch (SQLException ex) {
            Logger.getLogger(EditProductForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnUpdateProductActionPerformed

    private void cmbProductIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbProductIdItemStateChanged

//        System.out.println(cmbProductId.getSelectedIndex());
    if (cmbProductId.getSelectedIndex() != -1) {
//        Check if the selected product is not the first item (blank) in the comboBox
        if (cmbProductId.getSelectedIndex() > 0)
        try {
            // TODO add your handling code here:
            String selectedProductId = cmbProductId.getSelectedItem().toString();
//            Query the attributes and its values of the selectedItem in ComboBox
            preparedStatement = con.prepareStatement("SELECT productName, stockQuantity, price, productType FROM products  WHERE productId = ? AND isVoid = 0");
            preparedStatement.setString(1, selectedProductId);
            resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
//                Populate each textbox / spinners with its respective value from the query
                txtProductName.setText(resultSet.getString("productName")); 
                spnProductQuantity.setValue(resultSet.getInt("stockQuantity"));
                spnProductPrice.setValue(resultSet.getInt("price"));
                txtProductType.setText(resultSet.getString("productType"));
                
                

            }
        } catch (SQLException ex) {
            Logger.getLogger(EditProductForm.class.getName()).log(Level.SEVERE, null, ex);
        } else {
//           Set everything to default if blank string is selected on comboBox
            txtProductName.setText("");
            spnProductQuantity.setValue(1);
            spnProductPrice.setValue(1);
            txtProductType.setText("");
        }
        
    
    
    }
        
         
        
    }//GEN-LAST:event_cmbProductIdItemStateChanged

    private void btnDeleteProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteProductActionPerformed
        try {
            // TODO add your handling code here:
            ArrayList<String> errorList = new ArrayList<>();
            String selectedProductId = cmbProductId.getSelectedItem().toString();
            
            if ("".equals((selectedProductId))) {
           
                errorList.add("Please select a Product Id");
            }
            if (errorList.isEmpty()) {
                
                preparedStatement = con.prepareStatement("UPDATE products SET isVoid = 1 WHERE productId = ?");
                preparedStatement.setString(1, selectedProductId);
                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected == 1) {
                    txtProductName.setText("");
                    
                    Object spinnerNumberModel = ((SpinnerNumberModel) spnProductPrice.getModel()).getMinimum();
                    spnProductPrice.setValue(spinnerNumberModel);
                    spnProductQuantity.setValue(spinnerNumberModel);
                    txtProductType.setText("");
                    cmbProductId.setSelectedIndex(0);
                    
                    populateComboBox();
                    adminProductTablePanelScreen.populateTable();
                    JOptionPane.showMessageDialog(this, "Product Deleted Successfully");
                    
                    
                } else {
                    JOptionPane.showMessageDialog(this, "Failed to Delete product", "Error", JOptionPane.ERROR_MESSAGE);
                }
               
            } else {
                JOptionPane.showMessageDialog(this, errorList.get(0), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(EditProductForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        
    }//GEN-LAST:event_btnDeleteProductActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        FlatMaterialDeepOceanIJTheme.setup();

//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(EditProductForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(EditProductForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(EditProductForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(EditProductForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new EditProductForm().setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteProduct;
    private javax.swing.JButton btnUpdateProduct;
    private javax.swing.JComboBox<String> cmbProductId;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner spnProductPrice;
    private javax.swing.JSpinner spnProductQuantity;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JTextField txtProductType;
    // End of variables declaration//GEN-END:variables
}
