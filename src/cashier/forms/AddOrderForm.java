package cashier.forms;


import admin.forms.*;
import cashier.panels.CashierOrderTablePanel;
import com.formdev.flatlaf.intellijthemes.FlatDarkPurpleIJTheme;
import com.formdev.flatlaf.intellijthemes.materialthemeuilite.FlatMaterialDeepOceanIJTheme;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.text.DateFormatter;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Marku
 */
public class AddOrderForm extends javax.swing.JFrame {
    Connection con;
    PreparedStatement preparedStatement;
    ResultSet resultSet;
    CashierOrderTablePanel cashierOrderTablePanelScreen;
    /**
     * Creates new form addOrderForm
     */
    public AddOrderForm(CashierOrderTablePanel cashierOrderTablePanelScreen ) {
        this.cashierOrderTablePanelScreen = cashierOrderTablePanelScreen;
        initComponents();
        connect();
        populateComboBox();
        txtOrderDate.setText(getCurrentInputDate());
        
    }
    
        public void connect() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/myschool", "root", "");
        }   catch (ClassNotFoundException ex) {
                Logger.getLogger(AddOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }   catch (SQLException ex) {
             Logger.getLogger(AddOrderForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    public void populateComboBox() {
        try {
            preparedStatement = con.prepareStatement("SELECT productId FROM products WHERE isVoid = 0 AND stockQuantity > 0;");
            resultSet = preparedStatement.executeQuery();
            cmbProductId.removeAllItems();
            cmbProductId.addItem("");
//            Populate the combo box with productId
            while (resultSet.next()) {
                cmbProductId.addItem(resultSet.getString("productId"));
            }

        } catch (SQLException ex) {
            Logger.getLogger(AddOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public String getCurrentInputDate() {
        LocalDateTime currentDateTime = LocalDateTime.now();
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String formattedDate = currentDateTime.format(dateFormatter);
        return formattedDate;
    }
    
    public boolean isValidDate(String date) {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            LocalDateTime dateTime = LocalDateTime.parse(date, formatter);
            return true;
        } catch(Exception e) {
            return false;
        }
        
    }
    
    private static boolean isValidInteger(String str) {
        try {
            int value = Integer.parseInt(str);
            // checks for negative value
            return value > 0;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    


  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnAddOrder = new javax.swing.JButton();
        txtOrderDate = new javax.swing.JTextField();
        spnProductQuantity = new javax.swing.JSpinner();
        spnProductPrice = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        txtTotalAmount = new javax.swing.JTextField();
        cmbProductId = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        txtProductName = new javax.swing.JTextField();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(500, 600));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Add Order");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Select Product Id");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Order Date");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Product Quantity");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Product Price");

        btnAddOrder.setForeground(new java.awt.Color(255, 255, 255));
        btnAddOrder.setText("Add Order");
        btnAddOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddOrderActionPerformed(evt);
            }
        });

        txtOrderDate.setEnabled(false);

        spnProductQuantity.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        spnProductQuantity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnProductQuantityStateChanged(evt);
            }
        });

        spnProductPrice.setEnabled(false);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Total Amount");

        txtTotalAmount.setEnabled(false);

        cmbProductId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbProductId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbProductIdItemStateChanged(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Product Name");

        txtProductName.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(44, 44, 44)
                                .addComponent(txtTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnAddOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel6)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addGap(37, 37, 37))
                                        .addComponent(jLabel7))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(28, 28, 28)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(spnProductPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(spnProductQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(22, 22, 22)
                                            .addComponent(txtOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel9))
                                .addGap(25, 25, 25)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbProductId, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel3))
                        .addGap(0, 15, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbProductId, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnProductPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(spnProductQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(btnAddOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(154, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 22;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 70, 6, 77);
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbProductIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbProductIdItemStateChanged
        // TODO add your handling code here:
        if (cmbProductId.getSelectedIndex() != -1) {
//        Check if the selected product is not the first item (blank) in the comboBox
            if (cmbProductId.getSelectedIndex() > 0) {
                try {
                    String selectedProductId = cmbProductId.getSelectedItem().toString();
                    //            Query the attributes and its values of the selectedItem in ComboBox
                    preparedStatement = con.prepareStatement("SELECT productName, stockQuantity, price, productType FROM products  WHERE productId = ? AND isVoid = 0");
                    preparedStatement.setString(1, selectedProductId);
                    resultSet = preparedStatement.executeQuery();
                    if (resultSet.next()) {
                        //                Check if there is stock for the product
                        if (resultSet.getInt("stockQuantity") > 0) {
                            //  Set the max limit of Product Quantity Spinner to current available Stock Quantity of product
                            SpinnerNumberModel spinnerNumberModel = new SpinnerNumberModel(1, 1, resultSet.getInt("stockQuantity"), 1);
                            spnProductQuantity.setModel(spinnerNumberModel);

                            //               Populate each textbox / spinners with its respective value from the results of the query
                            txtProductName.setText(resultSet.getString("productName"));
                            spnProductQuantity.setValue(resultSet.getInt("stockQuantity"));
                            spnProductPrice.setValue(resultSet.getInt("price"));
                            int totalAmount = resultSet.getInt("price") * resultSet.getInt("stockQuantity");
                            txtTotalAmount.setText(Integer.toString(totalAmount));

                            // Display an error and recursively reset the form
                            // changing an item state within an ItemStateChanged event function starts a recursion
                        } else {
                            cmbProductId.setSelectedIndex(0);
                            JOptionPane.showMessageDialog(this, resultSet.getString("productName") + " " + "is out of stock", "Error", JOptionPane.ERROR_MESSAGE);

                        }

                    }
                } catch (SQLException ex) {
                    Logger.getLogger(AddOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
//           Set everything to default if blank string is selected on comboBox
                txtProductName.setText("");
                spnProductQuantity.setValue(1);
                spnProductPrice.setValue(1);
            }

        }

    }//GEN-LAST:event_cmbProductIdItemStateChanged

    private void spnProductQuantityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnProductQuantityStateChanged
        // TODO add your handling code here:
        int productPrice = Integer.parseInt(spnProductPrice.getValue().toString()); 
        int orderQuantity = (Integer) spnProductQuantity.getValue();
        int totalAmount = productPrice * orderQuantity;
        txtTotalAmount.setText(Integer.toString(totalAmount));
    }//GEN-LAST:event_spnProductQuantityStateChanged

    private void btnAddOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddOrderActionPerformed
        // TODO add your handling code here:
        ArrayList<String> errorList = new ArrayList<>();
        String productId = cmbProductId.getSelectedItem().toString();
        String totalAmount = txtTotalAmount.getText();
        String orderDate = txtOrderDate.getText();
        String orderQuantity = spnProductQuantity.getValue().toString();
        int rowsAffected;
 
        if (productId == "") {
            errorList.add("Please Input a product Id");
        }
        if (totalAmount == "") {
            errorList.add("Please Input a total Amount");
        }
        
        if (isValidInteger(orderQuantity) == false) {
            errorList.add("Please Input a valid integer for total amount");
        }
        
        if (isValidDate(orderDate) == false) {
            errorList.add("Please Input a valid Date");
        }
        if (orderQuantity == "") {
            errorList.add("Plese input order Quantity");
        }
        if (isValidInteger(orderQuantity) == false) {
            errorList.add("Please Input a valid integer for order Quantity");
            cmbProductId.setSelectedIndex(0);
        }
        
        if (errorList.isEmpty()) {
            try {
//                Subtract The order Quantity from the product's stock quantity
                preparedStatement = con.prepareStatement("UPDATE products SET stockQuantity = stockQuantity - ? WHERE productId = ?");
                preparedStatement.setString(1, orderQuantity);
                preparedStatement.setString(2, productId);
                rowsAffected = preparedStatement.executeUpdate();
                System.out.println(rowsAffected);
                
                
                
                
//             Insert the order to the database
                preparedStatement = con.prepareStatement("INSERT INTO orders (orderQuantity, totalAmount, orderDate, productId) VALUES (?, ?, ?, ?)");
                preparedStatement.setString(1, orderQuantity);
                preparedStatement.setString(2, totalAmount);
                preparedStatement.setString(3, orderDate);
                preparedStatement.setString(4, productId);
                
                rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected == 1) {
                    JOptionPane.showMessageDialog(this, "Order Added Successfully");
                    cmbProductId.setSelectedIndex(0);
                    // Refresh Order Table
                    cashierOrderTablePanelScreen.populateTable();
                    cashierOrderTablePanelScreen.viewProductFormScreen.populateTable();;
                    // Refresh Product Table                    
                    populateComboBox();
                } else {
                    JOptionPane.showMessageDialog(this, "Order Insertion Failed", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException ex) {
                Logger.getLogger(AddOrderForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, errorList.get(0), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        
    }//GEN-LAST:event_btnAddOrderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        FlatMaterialDeepOceanIJTheme.setup();

//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(AddOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(AddOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(AddOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(AddOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new AddOrderForm().setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddOrder;
    private javax.swing.JComboBox<String> cmbProductId;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner spnProductPrice;
    private javax.swing.JSpinner spnProductQuantity;
    private javax.swing.JTextField txtOrderDate;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JTextField txtTotalAmount;
    // End of variables declaration//GEN-END:variables
}
